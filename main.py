from aiogram import Bot, types, Dispatcher, Router
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import F


import asyncio
import logging



from src.config import TOKEN
from take_curs import cny_rate
from src.text import start_message_text, pozion_text, instruction_text, delivery_text, place_order_text


logging.basicConfig(level=logging.INFO)
router = Router()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot, storage=MemoryStorage())
dp.include_router(router)

inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ãüìñ', url='https://t.me/re_stylee', type='url'),
            InlineKeyboardButton(text='–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞üë®üèª‚Äçüíª', url='https://t.me/n1let7', type='url')
        ],
        [
            InlineKeyboardButton(text='–ù–∞—à Telegramüî•', url='https://t.me/restyle_shop', type='url'),
            InlineKeyboardButton(text='–ú—ã –µ—Å—Ç—å –Ω–∞ –ê–≤–∏—Ç–æüì¶', url='https://www.avito.ru/brands/fb5ec54987ddf9def727470a228c2d1b?src=sharing', type='url')
        ]
    ],
    row_width=2  # Set the row width to 2
)

reply_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ß—Ç–æ —Ç–∞–∫–æ–µ POIZON‚ùì'), KeyboardButton(text='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—Éüìú')],
        [KeyboardButton(text='–î–æ—Å—Ç–∞–≤–∫–∞üöö‚úàÔ∏è'), KeyboardButton(text='–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Åüíπ')],
        [KeyboardButton(text='–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Äüí∏'),KeyboardButton(text='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑üõí')]
    ],
    resize_keyboard=True
)

@router.message(Command("start"))
async def start_handler(msg: Message, state: FSMContext):
    await state.set_state(None)  # Reset state if needed
    # Send start message with inline keyboard
    await msg.answer(start_message_text, reply_markup=inline_keyboard)
    # Send a separate message to ensure the reply keyboard is set
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", reply_markup=reply_keyboard)

@router.message(F.text.startswith('–ß—Ç–æ —Ç–∞–∫–æ–µ POIZON‚ùì'))
async def send_poizon(message: types.Message, state: FSMContext):
    await state.set_state(None)  # Reset state if needed
    await message.reply(pozion_text)
    

@router.message(F.text.startswith('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—Éüìú'))
async def send_poizon(message: types.Message, state: FSMContext):
    await state.set_state(None)  # Reset state if needed
    await message.reply(instruction_text, reply_markup=inline_keyboard)
    


@router.message(F.text.startswith('–î–æ—Å—Ç–∞–≤–∫–∞üöö‚úàÔ∏è'))
async def send_poizon(message: types.Message, state: FSMContext):
    await state.set_state(None)  # Reset state if needed
    await message.reply(delivery_text, reply_markup=inline_keyboard)

@router.message(F.text.startswith('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑üõí'))
async def send_poizon(message: types.Message, state: FSMContext):
    await state.set_state(None)  # Reset state if needed
    await message.reply(place_order_text, reply_markup=inline_keyboard)
    
@router.message(F.text.startswith('–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Åüíπ'))
async def send_poizon(message: types.Message, state: FSMContext):
    await state.set_state(None)  # Reset state if needed
    await message.reply(f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —é–∞–Ω—è: {(cny_rate+float(1.2)):.2f}‚ÇΩ")
    
class CalculatorStates(StatesGroup):
    waiting_for_price = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–Ω—ã
    
@router.message(F.text.startswith('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Äüí∏'))
async def calculator_handler(message: types.Message, state: FSMContext):
    await state.set_state(CalculatorStates.waiting_for_price)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ —é–∞–Ω—è—Ö:")

@router.message(CalculatorStates.waiting_for_price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        price_in_cny = float(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        total_price = price_in_cny * (cny_rate+float(1.2))  # –£–º–Ω–æ–∂–∏—Ç—å –Ω–∞ –∫—É—Ä—Å
        await message.reply(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö: {total_price:.2f}‚ÇΩ")  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    finally:
        await state.clear()  # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

async def main():
     try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
     except Exception as e:
        logging.error(f"An error occurred: {e}")

if __name__ == "__main__":
    asyncio.run(main())